// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.4
//   protoc               v5.28.3
// source: messages.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "kpoppop.messages.v1";

export enum EventType {
  UNKNOWN_TYPE = 0,
  CONNECT = 1,
  CONVERSATIONS = 2,
  MARK_AS_READ = 3,
  UNRECOGNIZED = -1,
}

export function eventTypeFromJSON(object: any): EventType {
  switch (object) {
    case 0:
    case "UNKNOWN_TYPE":
      return EventType.UNKNOWN_TYPE;
    case 1:
    case "CONNECT":
      return EventType.CONNECT;
    case 2:
    case "CONVERSATIONS":
      return EventType.CONVERSATIONS;
    case 3:
    case "MARK_AS_READ":
      return EventType.MARK_AS_READ;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EventType.UNRECOGNIZED;
  }
}

export function eventTypeToJSON(object: EventType): string {
  switch (object) {
    case EventType.UNKNOWN_TYPE:
      return "UNKNOWN_TYPE";
    case EventType.CONNECT:
      return "CONNECT";
    case EventType.CONVERSATIONS:
      return "CONVERSATIONS";
    case EventType.MARK_AS_READ:
      return "MARK_AS_READ";
    case EventType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface EventMessage {
  event: EventType;
  respConnect?: ContentConnectResponse | undefined;
  respConvos?: ContentConversationsResponse | undefined;
  reqRead?: ContentMarkAsRead | undefined;
  respRead?: ContentMarkAsReadResponse | undefined;
}

export interface Message {
  convid: string;
  to: number;
  from: number;
  content: string;
  createdAt: string;
  fromSelf: boolean;
  read: boolean;
}

export interface Conversation {
  id: number;
  convid: string;
  username: string;
  displayname?: string | undefined;
  photo?: string | undefined;
  status: string;
  messages: Message[];
  unread: number;
}

export interface ContentConnectResponse {
  content: string;
}

export interface ContentConversationsResponse {
  conversations: Conversation[];
}

export interface ContentMarkAsRead {
  /** Conversation ID */
  convid: string;
  /** Recipient ID */
  to: number;
}

export interface ContentMarkAsReadResponse {
  /** Conversation ID */
  convid: string;
  /** Recipient ID */
  to: number;
  /** Number of unread messages remaining */
  unread: number;
  /** Whether the messages are marked as read */
  read: boolean;
}

function createBaseEventMessage(): EventMessage {
  return { event: 0, respConnect: undefined, respConvos: undefined, reqRead: undefined, respRead: undefined };
}

export const EventMessage: MessageFns<EventMessage> = {
  encode(message: EventMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.event !== 0) {
      writer.uint32(8).int32(message.event);
    }
    if (message.respConnect !== undefined) {
      ContentConnectResponse.encode(message.respConnect, writer.uint32(18).fork()).join();
    }
    if (message.respConvos !== undefined) {
      ContentConversationsResponse.encode(message.respConvos, writer.uint32(26).fork()).join();
    }
    if (message.reqRead !== undefined) {
      ContentMarkAsRead.encode(message.reqRead, writer.uint32(34).fork()).join();
    }
    if (message.respRead !== undefined) {
      ContentMarkAsReadResponse.encode(message.respRead, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.event = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.respConnect = ContentConnectResponse.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.respConvos = ContentConversationsResponse.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.reqRead = ContentMarkAsRead.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.respRead = ContentMarkAsReadResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventMessage {
    return {
      event: isSet(object.event) ? eventTypeFromJSON(object.event) : 0,
      respConnect: isSet(object.respConnect) ? ContentConnectResponse.fromJSON(object.respConnect) : undefined,
      respConvos: isSet(object.respConvos) ? ContentConversationsResponse.fromJSON(object.respConvos) : undefined,
      reqRead: isSet(object.reqRead) ? ContentMarkAsRead.fromJSON(object.reqRead) : undefined,
      respRead: isSet(object.respRead) ? ContentMarkAsReadResponse.fromJSON(object.respRead) : undefined,
    };
  },

  toJSON(message: EventMessage): unknown {
    const obj: any = {};
    if (message.event !== 0) {
      obj.event = eventTypeToJSON(message.event);
    }
    if (message.respConnect !== undefined) {
      obj.respConnect = ContentConnectResponse.toJSON(message.respConnect);
    }
    if (message.respConvos !== undefined) {
      obj.respConvos = ContentConversationsResponse.toJSON(message.respConvos);
    }
    if (message.reqRead !== undefined) {
      obj.reqRead = ContentMarkAsRead.toJSON(message.reqRead);
    }
    if (message.respRead !== undefined) {
      obj.respRead = ContentMarkAsReadResponse.toJSON(message.respRead);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventMessage>, I>>(base?: I): EventMessage {
    return EventMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventMessage>, I>>(object: I): EventMessage {
    const message = createBaseEventMessage();
    message.event = object.event ?? 0;
    message.respConnect = (object.respConnect !== undefined && object.respConnect !== null)
      ? ContentConnectResponse.fromPartial(object.respConnect)
      : undefined;
    message.respConvos = (object.respConvos !== undefined && object.respConvos !== null)
      ? ContentConversationsResponse.fromPartial(object.respConvos)
      : undefined;
    message.reqRead = (object.reqRead !== undefined && object.reqRead !== null)
      ? ContentMarkAsRead.fromPartial(object.reqRead)
      : undefined;
    message.respRead = (object.respRead !== undefined && object.respRead !== null)
      ? ContentMarkAsReadResponse.fromPartial(object.respRead)
      : undefined;
    return message;
  },
};

function createBaseMessage(): Message {
  return { convid: "", to: 0, from: 0, content: "", createdAt: "", fromSelf: false, read: false };
}

export const Message: MessageFns<Message> = {
  encode(message: Message, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.convid !== "") {
      writer.uint32(10).string(message.convid);
    }
    if (message.to !== 0) {
      writer.uint32(16).int32(message.to);
    }
    if (message.from !== 0) {
      writer.uint32(24).int32(message.from);
    }
    if (message.content !== "") {
      writer.uint32(34).string(message.content);
    }
    if (message.createdAt !== "") {
      writer.uint32(42).string(message.createdAt);
    }
    if (message.fromSelf !== false) {
      writer.uint32(48).bool(message.fromSelf);
    }
    if (message.read !== false) {
      writer.uint32(56).bool(message.read);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.convid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.to = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.from = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.fromSelf = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.read = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message {
    return {
      convid: isSet(object.convid) ? globalThis.String(object.convid) : "",
      to: isSet(object.to) ? globalThis.Number(object.to) : 0,
      from: isSet(object.from) ? globalThis.Number(object.from) : 0,
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      fromSelf: isSet(object.fromSelf) ? globalThis.Boolean(object.fromSelf) : false,
      read: isSet(object.read) ? globalThis.Boolean(object.read) : false,
    };
  },

  toJSON(message: Message): unknown {
    const obj: any = {};
    if (message.convid !== "") {
      obj.convid = message.convid;
    }
    if (message.to !== 0) {
      obj.to = Math.round(message.to);
    }
    if (message.from !== 0) {
      obj.from = Math.round(message.from);
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.fromSelf !== false) {
      obj.fromSelf = message.fromSelf;
    }
    if (message.read !== false) {
      obj.read = message.read;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message>, I>>(base?: I): Message {
    return Message.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message>, I>>(object: I): Message {
    const message = createBaseMessage();
    message.convid = object.convid ?? "";
    message.to = object.to ?? 0;
    message.from = object.from ?? 0;
    message.content = object.content ?? "";
    message.createdAt = object.createdAt ?? "";
    message.fromSelf = object.fromSelf ?? false;
    message.read = object.read ?? false;
    return message;
  },
};

function createBaseConversation(): Conversation {
  return {
    id: 0,
    convid: "",
    username: "",
    displayname: undefined,
    photo: undefined,
    status: "",
    messages: [],
    unread: 0,
  };
}

export const Conversation: MessageFns<Conversation> = {
  encode(message: Conversation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.convid !== "") {
      writer.uint32(18).string(message.convid);
    }
    if (message.username !== "") {
      writer.uint32(26).string(message.username);
    }
    if (message.displayname !== undefined) {
      writer.uint32(34).string(message.displayname);
    }
    if (message.photo !== undefined) {
      writer.uint32(42).string(message.photo);
    }
    if (message.status !== "") {
      writer.uint32(50).string(message.status);
    }
    for (const v of message.messages) {
      Message.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.unread !== 0) {
      writer.uint32(64).int32(message.unread);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Conversation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConversation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.convid = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.displayname = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.photo = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.messages.push(Message.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.unread = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Conversation {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      convid: isSet(object.convid) ? globalThis.String(object.convid) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      displayname: isSet(object.displayname) ? globalThis.String(object.displayname) : undefined,
      photo: isSet(object.photo) ? globalThis.String(object.photo) : undefined,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      messages: globalThis.Array.isArray(object?.messages) ? object.messages.map((e: any) => Message.fromJSON(e)) : [],
      unread: isSet(object.unread) ? globalThis.Number(object.unread) : 0,
    };
  },

  toJSON(message: Conversation): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.convid !== "") {
      obj.convid = message.convid;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.displayname !== undefined) {
      obj.displayname = message.displayname;
    }
    if (message.photo !== undefined) {
      obj.photo = message.photo;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.messages?.length) {
      obj.messages = message.messages.map((e) => Message.toJSON(e));
    }
    if (message.unread !== 0) {
      obj.unread = Math.round(message.unread);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Conversation>, I>>(base?: I): Conversation {
    return Conversation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Conversation>, I>>(object: I): Conversation {
    const message = createBaseConversation();
    message.id = object.id ?? 0;
    message.convid = object.convid ?? "";
    message.username = object.username ?? "";
    message.displayname = object.displayname ?? undefined;
    message.photo = object.photo ?? undefined;
    message.status = object.status ?? "";
    message.messages = object.messages?.map((e) => Message.fromPartial(e)) || [];
    message.unread = object.unread ?? 0;
    return message;
  },
};

function createBaseContentConnectResponse(): ContentConnectResponse {
  return { content: "" };
}

export const ContentConnectResponse: MessageFns<ContentConnectResponse> = {
  encode(message: ContentConnectResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.content !== "") {
      writer.uint32(10).string(message.content);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContentConnectResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContentConnectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.content = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContentConnectResponse {
    return { content: isSet(object.content) ? globalThis.String(object.content) : "" };
  },

  toJSON(message: ContentConnectResponse): unknown {
    const obj: any = {};
    if (message.content !== "") {
      obj.content = message.content;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ContentConnectResponse>, I>>(base?: I): ContentConnectResponse {
    return ContentConnectResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ContentConnectResponse>, I>>(object: I): ContentConnectResponse {
    const message = createBaseContentConnectResponse();
    message.content = object.content ?? "";
    return message;
  },
};

function createBaseContentConversationsResponse(): ContentConversationsResponse {
  return { conversations: [] };
}

export const ContentConversationsResponse: MessageFns<ContentConversationsResponse> = {
  encode(message: ContentConversationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.conversations) {
      Conversation.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContentConversationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContentConversationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.conversations.push(Conversation.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContentConversationsResponse {
    return {
      conversations: globalThis.Array.isArray(object?.conversations)
        ? object.conversations.map((e: any) => Conversation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ContentConversationsResponse): unknown {
    const obj: any = {};
    if (message.conversations?.length) {
      obj.conversations = message.conversations.map((e) => Conversation.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ContentConversationsResponse>, I>>(base?: I): ContentConversationsResponse {
    return ContentConversationsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ContentConversationsResponse>, I>>(object: I): ContentConversationsResponse {
    const message = createBaseContentConversationsResponse();
    message.conversations = object.conversations?.map((e) => Conversation.fromPartial(e)) || [];
    return message;
  },
};

function createBaseContentMarkAsRead(): ContentMarkAsRead {
  return { convid: "", to: 0 };
}

export const ContentMarkAsRead: MessageFns<ContentMarkAsRead> = {
  encode(message: ContentMarkAsRead, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.convid !== "") {
      writer.uint32(10).string(message.convid);
    }
    if (message.to !== 0) {
      writer.uint32(16).int32(message.to);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContentMarkAsRead {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContentMarkAsRead();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.convid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.to = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContentMarkAsRead {
    return {
      convid: isSet(object.convid) ? globalThis.String(object.convid) : "",
      to: isSet(object.to) ? globalThis.Number(object.to) : 0,
    };
  },

  toJSON(message: ContentMarkAsRead): unknown {
    const obj: any = {};
    if (message.convid !== "") {
      obj.convid = message.convid;
    }
    if (message.to !== 0) {
      obj.to = Math.round(message.to);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ContentMarkAsRead>, I>>(base?: I): ContentMarkAsRead {
    return ContentMarkAsRead.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ContentMarkAsRead>, I>>(object: I): ContentMarkAsRead {
    const message = createBaseContentMarkAsRead();
    message.convid = object.convid ?? "";
    message.to = object.to ?? 0;
    return message;
  },
};

function createBaseContentMarkAsReadResponse(): ContentMarkAsReadResponse {
  return { convid: "", to: 0, unread: 0, read: false };
}

export const ContentMarkAsReadResponse: MessageFns<ContentMarkAsReadResponse> = {
  encode(message: ContentMarkAsReadResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.convid !== "") {
      writer.uint32(10).string(message.convid);
    }
    if (message.to !== 0) {
      writer.uint32(16).int32(message.to);
    }
    if (message.unread !== 0) {
      writer.uint32(24).int32(message.unread);
    }
    if (message.read !== false) {
      writer.uint32(32).bool(message.read);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContentMarkAsReadResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContentMarkAsReadResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.convid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.to = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.unread = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.read = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContentMarkAsReadResponse {
    return {
      convid: isSet(object.convid) ? globalThis.String(object.convid) : "",
      to: isSet(object.to) ? globalThis.Number(object.to) : 0,
      unread: isSet(object.unread) ? globalThis.Number(object.unread) : 0,
      read: isSet(object.read) ? globalThis.Boolean(object.read) : false,
    };
  },

  toJSON(message: ContentMarkAsReadResponse): unknown {
    const obj: any = {};
    if (message.convid !== "") {
      obj.convid = message.convid;
    }
    if (message.to !== 0) {
      obj.to = Math.round(message.to);
    }
    if (message.unread !== 0) {
      obj.unread = Math.round(message.unread);
    }
    if (message.read !== false) {
      obj.read = message.read;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ContentMarkAsReadResponse>, I>>(base?: I): ContentMarkAsReadResponse {
    return ContentMarkAsReadResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ContentMarkAsReadResponse>, I>>(object: I): ContentMarkAsReadResponse {
    const message = createBaseContentMarkAsReadResponse();
    message.convid = object.convid ?? "";
    message.to = object.to ?? 0;
    message.unread = object.unread ?? 0;
    message.read = object.read ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
